{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bafe58fe-5d2e-4454-8e44-72529f5a906f",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'streamlit'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_10996\\118411577.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mstreamlit\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mst\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexpress\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mpx\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mcategory_encoders\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mOneHotEncoder\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlinear_model\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mRidge\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'"
     ]
    }
   ],
   "source": [
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "from category_encoders import OneHotEncoder\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "# Function to wrangle data\n",
    "def wrangle(filepath):\n",
    "    df = pd.read_csv(filepath)\n",
    "    return df\n",
    "\n",
    "# Load data\n",
    "df = wrangle(\"training_ForML.csv\")\n",
    "\n",
    "# Scatter mapbox plot\n",
    "st.title(\"Interactive Data Visualization for Borehole Exploration\")\n",
    "st.subheader(\"Scatter Mapbox Plot\")\n",
    "fig = px.scatter_mapbox(\n",
    "    df, \n",
    "    lat=\"lat\",\n",
    "    lon=\"lon\",\n",
    "    width=600, \n",
    "    height=600, \n",
    "    color=\"yield_l_sec\",\n",
    "    hover_data=[\"yield_l_sec\"],\n",
    ")\n",
    "fig.update_layout(mapbox_style=\"open-street-map\")\n",
    "st.plotly_chart(fig)\n",
    "\n",
    "# 3D scatter plot\n",
    "st.subheader(\"3D Scatter Plot\")\n",
    "fig = px.scatter_3d(\n",
    "    df,\n",
    "    x=\"lon\",\n",
    "    y=\"lat\",\n",
    "    z=\"yield_l_sec\",\n",
    "    labels={\"lon\": \"longitude\", \"lat\": \"latitude\", \"yield_l_sec\": \"Discharge Rate\"},\n",
    "    width=600,\n",
    "    height=500,\n",
    ")\n",
    "fig.update_traces(\n",
    "    marker={\"size\": 4, \"line\": {\"width\": 2, \"color\": \"DarkSlateGrey\"}},\n",
    "    selector={\"mode\": \"markers\"},\n",
    ")\n",
    "st.plotly_chart(fig)\n",
    "\n",
    "# Model training\n",
    "target = \"yield_l_sec\"\n",
    "features = [\"lat\", \"lon\", \"swl\", \"bh_depth\", \"curve_type\"]\n",
    "X_train = df[features]\n",
    "y_train = df[target]\n",
    "\n",
    "y_mean = y_train.mean()\n",
    "y_pred_training = [y_mean] * len(y_train)\n",
    "mae_baseline = mean_absolute_error(y_train, y_pred_training)\n",
    "st.write(\"Mean yield:\", y_mean)\n",
    "st.write(\"Mean absolute error:\", mae_baseline)\n",
    "\n",
    "model = make_pipeline(OneHotEncoder(use_cat_names=True), Ridge())\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = model.predict(X_train)\n",
    "mae_pred = mean_absolute_error(y_train, y_train_pred)\n",
    "st.write(\"Training MAE:\", mae_pred.round(2))\n",
    "\n",
    "# Prediction function\n",
    "def make_prediction(lat, lon, swl, borehole_depth, curve_type):\n",
    "    data = {\n",
    "        \"lat\": [lat],\n",
    "        \"lon\": [lon],\n",
    "        \"swl\": [swl],\n",
    "        \"bh_depth\": [borehole_depth],\n",
    "        \"curve_type\": [curve_type]\n",
    "    }\n",
    "    df = pd.DataFrame(data)\n",
    "    prediction = model.predict(df).round(2)[0]\n",
    "    return prediction\n",
    "\n",
    "# Interactive inputs\n",
    "st.sidebar.subheader(\"Make Predictions\")\n",
    "lat = st.sidebar.slider(\n",
    "    \"Latitude\", float(X_train[\"lat\"].min()), float(X_train[\"lat\"].max()), float(X_train[\"lat\"].mean()))\n",
    "lon = st.sidebar.slider(\n",
    "    \"Longitude\", float(X_train[\"lon\"].min()), float(X_train[\"lon\"].max()), float(X_train[\"lon\"].mean()))\n",
    "swl = st.sidebar.slider(\n",
    "    \"SWL\", int(X_train[\"swl\"].min()), int(X_train[\"swl\"].max()), int(X_train[\"swl\"].mean()))\n",
    "borehole_depth = st.sidebar.slider(\n",
    "    \"Borehole Depth\", int(X_train[\"bh_depth\"].min()), int(X_train[\"bh_depth\"].max()), int(X_train[\"bh_depth\"].mean()))\n",
    "curve_type = st.sidebar.selectbox(\n",
    "    \"Curve Type\", sorted(X_train[\"curve_type\"].unique()))\n",
    "\n",
    "# Display prediction\n",
    "if st.sidebar.button(\"Predict\"):\n",
    "    prediction = make_prediction(lat, lon, swl, borehole_depth, curve_type)\n",
    "    st.sidebar.write(f\"Predicted discharge rate: {prediction} l/s\")\n",
    "\n",
    "# Run the Streamlit app\n",
    "if __name__ == \"__main__\":\n",
    "    st.write(\"Running the Streamlit app...\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e29677a4-9a38-4228-84a3-c131ad16c52d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
